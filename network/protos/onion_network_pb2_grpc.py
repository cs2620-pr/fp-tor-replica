# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import onion_network_pb2 as onion__network__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in onion_network_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RegistryStub(object):
    """Service for the registry (directory server)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNodes = channel.unary_unary(
                '/onion_network.Registry/GetNodes',
                request_serializer=onion__network__pb2.GetNodesRequest.SerializeToString,
                response_deserializer=onion__network__pb2.GetNodesResponse.FromString,
                _registered_method=True)
        self.RegisterNode = channel.unary_unary(
                '/onion_network.Registry/RegisterNode',
                request_serializer=onion__network__pb2.RegisterNodeRequest.SerializeToString,
                response_deserializer=onion__network__pb2.Empty.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/onion_network.Registry/Ping',
                request_serializer=onion__network__pb2.Empty.SerializeToString,
                response_deserializer=onion__network__pb2.Empty.FromString,
                _registered_method=True)


class RegistryServicer(object):
    """Service for the registry (directory server)
    """

    def GetNodes(self, request, context):
        """Get a list of available nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterNode(self, request, context):
        """Register a node with the registry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Check if the registry is online
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodes,
                    request_deserializer=onion__network__pb2.GetNodesRequest.FromString,
                    response_serializer=onion__network__pb2.GetNodesResponse.SerializeToString,
            ),
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=onion__network__pb2.RegisterNodeRequest.FromString,
                    response_serializer=onion__network__pb2.Empty.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=onion__network__pb2.Empty.FromString,
                    response_serializer=onion__network__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'onion_network.Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('onion_network.Registry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Service for the registry (directory server)
    """

    @staticmethod
    def GetNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Registry/GetNodes',
            onion__network__pb2.GetNodesRequest.SerializeToString,
            onion__network__pb2.GetNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Registry/RegisterNode',
            onion__network__pb2.RegisterNodeRequest.SerializeToString,
            onion__network__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Registry/Ping',
            onion__network__pb2.Empty.SerializeToString,
            onion__network__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RouterStub(object):
    """Service for router nodes (entry, middle, exit)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RouteMessage = channel.unary_unary(
                '/onion_network.Router/RouteMessage',
                request_serializer=onion__network__pb2.RouteMessageRequest.SerializeToString,
                response_deserializer=onion__network__pb2.RouteMessageResponse.FromString,
                _registered_method=True)
        self.RouteBackward = channel.unary_unary(
                '/onion_network.Router/RouteBackward',
                request_serializer=onion__network__pb2.RouteMessageRequest.SerializeToString,
                response_deserializer=onion__network__pb2.RouteMessageResponse.FromString,
                _registered_method=True)
        self.ExchangeKeys = channel.unary_unary(
                '/onion_network.Router/ExchangeKeys',
                request_serializer=onion__network__pb2.ExchangeKeysRequest.SerializeToString,
                response_deserializer=onion__network__pb2.ExchangeKeysResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/onion_network.Router/Ping',
                request_serializer=onion__network__pb2.Empty.SerializeToString,
                response_deserializer=onion__network__pb2.Empty.FromString,
                _registered_method=True)


class RouterServicer(object):
    """Service for router nodes (entry, middle, exit)
    """

    def RouteMessage(self, request, context):
        """Forward a message through the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RouteBackward(self, request, context):
        """Send a message backward through the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeKeys(self, request, context):
        """Exchange keys with a client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Check if the router is online
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RouteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.RouteMessage,
                    request_deserializer=onion__network__pb2.RouteMessageRequest.FromString,
                    response_serializer=onion__network__pb2.RouteMessageResponse.SerializeToString,
            ),
            'RouteBackward': grpc.unary_unary_rpc_method_handler(
                    servicer.RouteBackward,
                    request_deserializer=onion__network__pb2.RouteMessageRequest.FromString,
                    response_serializer=onion__network__pb2.RouteMessageResponse.SerializeToString,
            ),
            'ExchangeKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeKeys,
                    request_deserializer=onion__network__pb2.ExchangeKeysRequest.FromString,
                    response_serializer=onion__network__pb2.ExchangeKeysResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=onion__network__pb2.Empty.FromString,
                    response_serializer=onion__network__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'onion_network.Router', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('onion_network.Router', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Router(object):
    """Service for router nodes (entry, middle, exit)
    """

    @staticmethod
    def RouteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Router/RouteMessage',
            onion__network__pb2.RouteMessageRequest.SerializeToString,
            onion__network__pb2.RouteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RouteBackward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Router/RouteBackward',
            onion__network__pb2.RouteMessageRequest.SerializeToString,
            onion__network__pb2.RouteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExchangeKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Router/ExchangeKeys',
            onion__network__pb2.ExchangeKeysRequest.SerializeToString,
            onion__network__pb2.ExchangeKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Router/Ping',
            onion__network__pb2.Empty.SerializeToString,
            onion__network__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TerminusStub(object):
    """Service for terminus nodes (clients)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeliverMessage = channel.unary_unary(
                '/onion_network.Terminus/DeliverMessage',
                request_serializer=onion__network__pb2.DeliverMessageRequest.SerializeToString,
                response_deserializer=onion__network__pb2.Empty.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/onion_network.Terminus/Ping',
                request_serializer=onion__network__pb2.Empty.SerializeToString,
                response_deserializer=onion__network__pb2.Empty.FromString,
                _registered_method=True)


class TerminusServicer(object):
    """Service for terminus nodes (clients)
    """

    def DeliverMessage(self, request, context):
        """Deliver a message to a client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Check if the terminus is online
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TerminusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeliverMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeliverMessage,
                    request_deserializer=onion__network__pb2.DeliverMessageRequest.FromString,
                    response_serializer=onion__network__pb2.Empty.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=onion__network__pb2.Empty.FromString,
                    response_serializer=onion__network__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'onion_network.Terminus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('onion_network.Terminus', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Terminus(object):
    """Service for terminus nodes (clients)
    """

    @staticmethod
    def DeliverMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Terminus/DeliverMessage',
            onion__network__pb2.DeliverMessageRequest.SerializeToString,
            onion__network__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/onion_network.Terminus/Ping',
            onion__network__pb2.Empty.SerializeToString,
            onion__network__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
